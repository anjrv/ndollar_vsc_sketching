// source: sketching_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.is.nsn.sketching.AddTemplateRequest', null, global);
goog.exportSymbol('proto.is.nsn.sketching.AddTemplateResponse', null, global);
goog.exportSymbol('proto.is.nsn.sketching.ParseSketchRequest', null, global);
goog.exportSymbol('proto.is.nsn.sketching.ParseSketchResponse', null, global);
goog.exportSymbol('proto.is.nsn.sketching.ParseSketchResponse.Shape', null, global);
goog.exportSymbol('proto.is.nsn.sketching.Point', null, global);
goog.exportSymbol('proto.is.nsn.sketching.Stroke', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.nsn.sketching.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.Point.displayName = 'proto.is.nsn.sketching.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.Stroke = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.nsn.sketching.Stroke.repeatedFields_, null);
};
goog.inherits(proto.is.nsn.sketching.Stroke, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.Stroke.displayName = 'proto.is.nsn.sketching.Stroke';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.ParseSketchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.nsn.sketching.ParseSketchRequest.repeatedFields_, null);
};
goog.inherits(proto.is.nsn.sketching.ParseSketchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.ParseSketchRequest.displayName = 'proto.is.nsn.sketching.ParseSketchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.ParseSketchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.nsn.sketching.ParseSketchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.ParseSketchResponse.displayName = 'proto.is.nsn.sketching.ParseSketchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.AddTemplateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.is.nsn.sketching.AddTemplateRequest.repeatedFields_, null);
};
goog.inherits(proto.is.nsn.sketching.AddTemplateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.AddTemplateRequest.displayName = 'proto.is.nsn.sketching.AddTemplateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.is.nsn.sketching.AddTemplateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.is.nsn.sketching.AddTemplateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.is.nsn.sketching.AddTemplateResponse.displayName = 'proto.is.nsn.sketching.AddTemplateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.Point}
 */
proto.is.nsn.sketching.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.Point;
  return proto.is.nsn.sketching.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.Point}
 */
proto.is.nsn.sketching.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.is.nsn.sketching.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.is.nsn.sketching.Point} returns this
 */
proto.is.nsn.sketching.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.is.nsn.sketching.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.is.nsn.sketching.Point} returns this
 */
proto.is.nsn.sketching.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.nsn.sketching.Stroke.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.Stroke.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.Stroke.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.Stroke} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.Stroke.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.is.nsn.sketching.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.Stroke}
 */
proto.is.nsn.sketching.Stroke.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.Stroke;
  return proto.is.nsn.sketching.Stroke.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.Stroke} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.Stroke}
 */
proto.is.nsn.sketching.Stroke.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.nsn.sketching.Point;
      reader.readMessage(value,proto.is.nsn.sketching.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.Stroke.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.Stroke.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.Stroke} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.Stroke.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.is.nsn.sketching.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point points = 1;
 * @return {!Array<!proto.is.nsn.sketching.Point>}
 */
proto.is.nsn.sketching.Stroke.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.is.nsn.sketching.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.nsn.sketching.Point, 1));
};


/**
 * @param {!Array<!proto.is.nsn.sketching.Point>} value
 * @return {!proto.is.nsn.sketching.Stroke} returns this
*/
proto.is.nsn.sketching.Stroke.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.nsn.sketching.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.nsn.sketching.Point}
 */
proto.is.nsn.sketching.Stroke.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.nsn.sketching.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.is.nsn.sketching.Stroke} returns this
 */
proto.is.nsn.sketching.Stroke.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.nsn.sketching.ParseSketchRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.ParseSketchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.ParseSketchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.ParseSketchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.ParseSketchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    strokesList: jspb.Message.toObjectList(msg.getStrokesList(),
    proto.is.nsn.sketching.Stroke.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.ParseSketchRequest}
 */
proto.is.nsn.sketching.ParseSketchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.ParseSketchRequest;
  return proto.is.nsn.sketching.ParseSketchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.ParseSketchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.ParseSketchRequest}
 */
proto.is.nsn.sketching.ParseSketchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.nsn.sketching.Stroke;
      reader.readMessage(value,proto.is.nsn.sketching.Stroke.deserializeBinaryFromReader);
      msg.addStrokes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.ParseSketchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.ParseSketchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.ParseSketchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.ParseSketchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrokesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.is.nsn.sketching.Stroke.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stroke strokes = 1;
 * @return {!Array<!proto.is.nsn.sketching.Stroke>}
 */
proto.is.nsn.sketching.ParseSketchRequest.prototype.getStrokesList = function() {
  return /** @type{!Array<!proto.is.nsn.sketching.Stroke>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.nsn.sketching.Stroke, 1));
};


/**
 * @param {!Array<!proto.is.nsn.sketching.Stroke>} value
 * @return {!proto.is.nsn.sketching.ParseSketchRequest} returns this
*/
proto.is.nsn.sketching.ParseSketchRequest.prototype.setStrokesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.is.nsn.sketching.Stroke=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.nsn.sketching.Stroke}
 */
proto.is.nsn.sketching.ParseSketchRequest.prototype.addStrokes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.is.nsn.sketching.Stroke, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.is.nsn.sketching.ParseSketchRequest} returns this
 */
proto.is.nsn.sketching.ParseSketchRequest.prototype.clearStrokesList = function() {
  return this.setStrokesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.ParseSketchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.ParseSketchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.ParseSketchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.is.nsn.sketching.Point.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.is.nsn.sketching.Point.toObject(includeInstance, f),
    shape: jspb.Message.getFieldWithDefault(msg, 3, 0),
    debug: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.ParseSketchResponse}
 */
proto.is.nsn.sketching.ParseSketchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.ParseSketchResponse;
  return proto.is.nsn.sketching.ParseSketchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.ParseSketchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.ParseSketchResponse}
 */
proto.is.nsn.sketching.ParseSketchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.is.nsn.sketching.Point;
      reader.readMessage(value,proto.is.nsn.sketching.Point.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.is.nsn.sketching.Point;
      reader.readMessage(value,proto.is.nsn.sketching.Point.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 3:
      var value = /** @type {!proto.is.nsn.sketching.ParseSketchResponse.Shape} */ (reader.readEnum());
      msg.setShape(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.ParseSketchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.ParseSketchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.ParseSketchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.is.nsn.sketching.Point.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.is.nsn.sketching.Point.serializeBinaryToWriter
    );
  }
  f = message.getShape();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDebug();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.is.nsn.sketching.ParseSketchResponse.Shape = {
  SHAPE_RECTANGLE: 0,
  SHAPE_CIRCLE: 1,
  SHAPE_UNSPECIFIED: 2
};

/**
 * optional Point start = 1;
 * @return {?proto.is.nsn.sketching.Point}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.getStart = function() {
  return /** @type{?proto.is.nsn.sketching.Point} */ (
    jspb.Message.getWrapperField(this, proto.is.nsn.sketching.Point, 1));
};


/**
 * @param {?proto.is.nsn.sketching.Point|undefined} value
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
*/
proto.is.nsn.sketching.ParseSketchResponse.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point end = 2;
 * @return {?proto.is.nsn.sketching.Point}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.getEnd = function() {
  return /** @type{?proto.is.nsn.sketching.Point} */ (
    jspb.Message.getWrapperField(this, proto.is.nsn.sketching.Point, 2));
};


/**
 * @param {?proto.is.nsn.sketching.Point|undefined} value
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
*/
proto.is.nsn.sketching.ParseSketchResponse.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Shape shape = 3;
 * @return {!proto.is.nsn.sketching.ParseSketchResponse.Shape}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.getShape = function() {
  return /** @type {!proto.is.nsn.sketching.ParseSketchResponse.Shape} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.is.nsn.sketching.ParseSketchResponse.Shape} value
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.setShape = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string debug = 4;
 * @return {string}
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.getDebug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.is.nsn.sketching.ParseSketchResponse} returns this
 */
proto.is.nsn.sketching.ParseSketchResponse.prototype.setDebug = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.is.nsn.sketching.AddTemplateRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.AddTemplateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.AddTemplateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.AddTemplateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strokesList: jspb.Message.toObjectList(msg.getStrokesList(),
    proto.is.nsn.sketching.Stroke.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.AddTemplateRequest}
 */
proto.is.nsn.sketching.AddTemplateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.AddTemplateRequest;
  return proto.is.nsn.sketching.AddTemplateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.AddTemplateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.AddTemplateRequest}
 */
proto.is.nsn.sketching.AddTemplateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.is.nsn.sketching.Stroke;
      reader.readMessage(value,proto.is.nsn.sketching.Stroke.deserializeBinaryFromReader);
      msg.addStrokes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.AddTemplateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.AddTemplateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.AddTemplateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrokesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.is.nsn.sketching.Stroke.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.is.nsn.sketching.AddTemplateRequest} returns this
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Stroke strokes = 2;
 * @return {!Array<!proto.is.nsn.sketching.Stroke>}
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.getStrokesList = function() {
  return /** @type{!Array<!proto.is.nsn.sketching.Stroke>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.is.nsn.sketching.Stroke, 2));
};


/**
 * @param {!Array<!proto.is.nsn.sketching.Stroke>} value
 * @return {!proto.is.nsn.sketching.AddTemplateRequest} returns this
*/
proto.is.nsn.sketching.AddTemplateRequest.prototype.setStrokesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.is.nsn.sketching.Stroke=} opt_value
 * @param {number=} opt_index
 * @return {!proto.is.nsn.sketching.Stroke}
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.addStrokes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.is.nsn.sketching.Stroke, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.is.nsn.sketching.AddTemplateRequest} returns this
 */
proto.is.nsn.sketching.AddTemplateRequest.prototype.clearStrokesList = function() {
  return this.setStrokesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.is.nsn.sketching.AddTemplateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.is.nsn.sketching.AddTemplateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.is.nsn.sketching.AddTemplateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.AddTemplateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.is.nsn.sketching.AddTemplateResponse}
 */
proto.is.nsn.sketching.AddTemplateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.is.nsn.sketching.AddTemplateResponse;
  return proto.is.nsn.sketching.AddTemplateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.is.nsn.sketching.AddTemplateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.is.nsn.sketching.AddTemplateResponse}
 */
proto.is.nsn.sketching.AddTemplateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.is.nsn.sketching.AddTemplateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.is.nsn.sketching.AddTemplateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.is.nsn.sketching.AddTemplateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.is.nsn.sketching.AddTemplateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.is.nsn.sketching);
